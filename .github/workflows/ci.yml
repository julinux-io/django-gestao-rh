name: CI

env:
  CONTAINER_NAME: gestao-rh

on:
  pull_request:
    branches: [dev, master]
  push:
    branches: [dev, master]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Install Pipenv
        run: |
          python -m pip install pipenv
          pipenv --python 3.8
      - name: Cache Python Dependencies
        uses: actions/cache@v2
        id: cache-pipenv
        with:
          path: ~/.local/share/virtualenv
          key: ${{ runner.os }}-pip-${{ hashFiles('**/Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Dependencies
        run: |
          pipenv sync
          pipenv sync --dev
      - name: Run Lint
        run: pipenv run flake8
      - name: Run Coverage
        run: |
          cp contrib/env-sample ./.env
          cd src/
          pipenv run coverage run manage.py test
          pipenv run coverage xml
      - name: Upload Test Coverage
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: ./src/coverage.xml
        
  build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
      - name: Push to Github Package
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: vespene/django-gestao-rh/${{ env.CONTAINER_NAME }}
          push: true
          tags: latest
          tag_with_ref: true
      - name: Push to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }} 
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: julinux/${{ env.CONTAINER_NAME }}
          push: true
          tags: latest
          tag_with_ref: true
      - uses: actions/download-artifact@v2
        with:
          name: coverage
          path: ./src/
      - name: Upload Coverage to codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./src/coverage.xml
          flags: unittests
          env_vars: OS, PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          path_to_write_report: ./src/coverage.xml
  staging:
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: ubuntu-latest
    needs: build
    env:
      PASSPHRASE: ${{ secrets.INVENTORY_PASSPHRASE }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install ansible -y
      - name: Decrypt Inventory File
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output ./contrib/inventory contrib/inventory.gpg
      - name: Decrypt SSH Key
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output ./contrib/id_rsa.deploy contrib/id_rsa.deploy.gpg
      - name: Set mode to SSH Key
        run: chmod 600 contrib/id_rsa.deploy
      - name: Deploy to Staging
        run: |
          ansible-playbook -i contrib/inventory --private-key=contrib/id_rsa.deploy -e "username=${{ github.actor }} password=${{ secrets.GITHUB_TOKEN }}" contrib/staging.yml
  production:
    if: github.event_name == 'master' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: build
    env:
      ALLOWED_HOSTS: '*.herokuapp.com'
      SECRET_KEY: ${{ secrets.HEROKU_SECRET_KEY }}
      DATABASE_URL: ${{ secrets.HEROKU_DATABASE_URL }}
    steps:
      - uses: actions/checkout@v2
      - name: akhileshns/heroku-deploy@v3.6.8
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: "gestao-rh-prod"
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: true
          docker_build_args: |
            SECRET_KEY
            ALLOWED_HOSTS
            DATABASE_URL
    